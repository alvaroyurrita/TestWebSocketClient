@startuml websocket-subscription
actor Actor
participant "Websocket Subject" as ws
participant "Websocket Subscription" as wss
participant "Websocket Server" as wssv

Actor -> ws++: Create Subject
ws -> wss **: Creates Subscription Object
deactivate ws

== subscribing ==
Actor -> wss ++: Subscribe
wss -> wssv--++: ws://address:port/path
alt Server Listening
    wssv -> wssv : opens connection
    wssv --> ws--++: upgrade
    ws -> Actor--: openObserver.Next (with message)
    note over Actor, ws
    message:
    isTrusted: true
    type: 'open'
end note
else Server Not Listening
    note over wss
        Subscribe times out.
    end note
    wss -> Actor: subscription.error (with error)
    note over Actor, wss
    Error:
    isTrusted: true
    type: 'error'
    end note
    ws -> Actor: closeObserver.next (with message)
    note over Actor, ws
    Message:
    type: 'close'
    reason: ""
    code: 1006
    wasClean: false
    end note
else Server Not Listening with retry
    loop until connection opens
        note over wss
            Subscribe times out.  Retry kicks in.
            Note that in mobile the subscribe doesn't time out.
        end note
        ws -> Actor: closeObserver.next (with message)
        note over Actor, ws
        Message:
        type: 'close'
        reason: ""
        code: 1006
        wasClean: false
        end note
        ws -> wss : connect
    end
end

== Sending a Message on Open Websocket ==
note over Actor, wssv
If subcription has not started, all messages are buffered and sent at once when the subcription starts
end note
Actor -> ws ++ : Send Message ("Full")
ws -> wssv --++: "message" Opcode: Text
wssv -> wss --++: "Server sent Full State"
wss -> Actor -- : subscription.next ("Server sent Full State")
note over Actor, wss
message
next: "reply if any"
end note

== Unsubscribing Websocket from subscription  ==
note over Actor, wssv
After unsubscribe it is possible to subscribe again to the same websocket subject
If retry is piped, this will stop the retry loop
end note
Actor -> wss ++: this.subscription.unsubscribe();
wss -> wssv --++: opcode: Connection Close
wssv -> ws --++: opcode: Connection Close
ws -> Actor -- : closeObserver.Next (with message)
note over Actor, wss
isTrusted: true,
wasClean: true,
reason: ""
code: 1005,
type: 'close'
end note

== Unsubscribing Websocket from subject  ==
note over Actor, wssv
After unsubscribe it is NOT possible to subscribe again to the same websocket subject
If retry is piped, this will not stop the retry loop
end note
Actor -> ws ++: this.subject.unsubscribe();
ws -> wssv --++: opcode: Connection Close
wssv -> ws --++: opcode: Connection Close
ws -> Actor -- : closeObserver.Next (with message)
alt windows, android
wss -> Actor -- : subscription.Complete
else ios
wss -> Actor -- : subscription.Error (with message)
end
note over Actor, wss
CloseEvent:
isTrusted: true,
wasClean: true, (iOS: false)
reason: ""
code: 1005, (iOS: 1006)
type: 'close'
end note

== Completing Websocket from subject  ==
note over Actor, wssv
After unsubscribe it is possible to subscribe again to the same websocket subject
if retry is piped, this will not stop the retry loop
end note
Actor -> ws ++: this.subject.complete();
ws -> wssv --++: opcode: Connection Close
wssv -> ws --++: opcode: Connection Close
ws -> Actor  : closingObserver.Next (with empty message)
ws -> Actor -- : closeObserver.Next (with message)
alt windows, android
wss -> Actor -- : subscription.Complete
else ios
wss -> Actor -- : subscription.Error (with message)
end
note over Actor, wss
CloseEvent:
isTrusted: true,
wasClean: true, (iOS: false)
reason: ""
code: 1005, (iOS: 1006)
type: 'close'
end note

== Completing Websocket from subject with error ==
note over Actor, wssv
After unsubscribe it is possible to subscribe again to the same websocket subject
if retry is piped, this will not stop the retry loop
end note
Actor -> ws ++: this.subject.error(errorObject);
ws -> wssv --++: opcode: Connection Close with payload
note over ws, wssv
Connection Close payload contains both Error Code and error message. It is repeated by server
end note
wssv -> ws --++: opcode: Connection Close with payload
ws -> Actor  : closingObserver.Next (with empty message)
ws -> Actor -- : closeObserver.Next (with message)
alt windows, android
wss -> Actor -- : subscription.Complete
else ios
wss -> Actor -- : subscription.Error (with message)
end
note over Actor, wss
CloseEvent:
isTrusted: true,
wasClean: true, (iOS: false)
code: 4005, (iOS: 1006)
type: 'close'
reason: 'Client Completing with Error!' (iOS: "")
end note

== Closing Websocket because of downed server  ==
note over Actor, wssv
If retry is piped. Retry will not start when werver closes connection.
end note
wssv -> ws --++: opcode: Connection Close
note over ws, wssv
Connection Close payload from server contains both Status Code and Reason.
end note
ws -> Actor --: closeObserver.Next (with message)
wss -> Actor -- : subscription.Complete
note over Actor, ws
isTrusted: true,
wasClean: true,
code: 1001 (Going Away),
type: 'close'
reason: 'Closeing Server Automatically after 10 seconds'
end note

== Server unexpected shutdown  ==
    note over Actor, wssv
        Retry kick differentl and at different rates.  
        Seems to be governed by the timout on the subscribe message
        When the server comes back online, all client reconnect immediatly.
    end note
ws -> Actor : closeObserver.Next (with message)
note over Actor, ws
    server closes with:
    code: 1006
    Reason: ""
    wasClean: False
end note
    loop until connection opens
        note over ws
            retry times out
        end note
        ws -> Actor: closeObserver.next (with message)
        note over Actor, ws
        Message:
        type: 'close'
        reason: ""
        code: 1006
        wasClean: false
        end note
        ws -> wssv : connect
    end
        note over ws
            Server Back online
        end note
    wssv -> ws --++: connected
    ws -> Actor --: openObserver.Next (with message)


== Mobile out of foucs or standby while Connected  ==
note over ws, wssv
iOS closes the socket immediatly
WIndows closes the socket immediatly when going to sleep
Android keeps the socket open for longer (+1m) but eventually it shuts it off
end note
ws -> wssv ++: socket is closed
wssv -> wssv --: Session Closed
deactivate wssv
note over wssv
server closes with:
code: 1006
Reason: An Exception has occured while receiving
end note
note over ws, wssv
iphone wakes up or app comes to foreground
end note
ws -> Actor : closeObserver.Next (with message)
ws -> wssv ++: reconnect
wssv -> ws --++: connected
ws -> Actor --: openObserver.Next (with message)



== Network Disconnect Server Side  ==
note over ws, wssv
    Clients are never aware that the server has gone down.
    Server closes all websocket connections after a about 10 seconds.
end note
wssv -> wssv --: Websocket Closed
note over Actor, ws
Server Comes online again.
No client tryies to reconnect. They are still unaware that the server has gone down.
If client sends a message to server there are several behaviors.
Notice how the message is never retried.
end note
Actor -> wss : Sends Message
alt On Windows and iOS
... Windows: ~10 Seconds ...
... iOS: ~50 Seconds ...
ws -> Actor : closeObserver.Next (with message)
note over Actor, ws
server closes with:
code: 1006
Reason: ""
wasClean: False
end note
ws -> wssv ++: reconnect
wssv -> ws --++: connected
ws -> Actor --: openObserver.Next (with message)
else on Android
note over Actor, ws
Nothing happens.  No closeObserver is triggered.
Subject needs to be unsubscribed to connect again.
end note
end


== Network Disconnect Client Side  ==
note over Actor, wssv
On all client, the server closes the websocket after about 50 seconds after the client disconnect.
On Windows when wi-fi is turned off closeObserver is sometimes triggered.
    When wi-fi is turned back on there is and after clients sends message 18 seconds pass before closeObserver is triggered.
On iOS when wi-fi is turned off closeObserver is never triggered until wifi is turned on again.
     No attempt to resubscribe when wifi is back is done
On Android when wi-fi is turned off closeObserver is triggered and retry kicks in with a infinity timeout.
end note
ws -> Actor : closeObserver.Next (with message)
note over Actor, ws
server closes with:
code: 1006
Reason: ""
wasClean: False
end note
ws -> wssv ++: reconnect
wssv -> ws --++: connected
ws -> Actor --: openObserver.Next (with message)
@enduml